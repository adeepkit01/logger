<ashwin> : Hello<vilas_m> : Hi! We ll start when everybody joins. <vilas_m> : So i guess we ll start.<vilas_m> : Today we will cover STL containers and if time permits, get started with a bit of number theory required for competitive coding<vilas_m> : Can someone point out what is a container, first of all?<vilas_m> : Ok, so in simple terms, something which can hold data is called a container<vilas_m> : First we shall deal with vectors<vilas_m> : Vectors are very similar to arrays, except that they can change their size at any time. <vilas_m> : To use them, insert #include<vector> in your code <vilas_m> : Or if you're using bits/stdc++.h already, then thats fine too<vilas_m> : We define a vector like this: vector<vector_type> var_name; <vilas_m> : So if we want a vector named 'v' with integer elements, we write vector<int> v; <vilas_m> : Inserting an element: to insert an element (say 'x') into the vector, we write v.push_back(x)<vilas_m> : This writes the element 'x' at the end of the vector<vilas_m> : How do we know the size of a vector? <vilas_m> : We use the function size(). So if we want to know the size of the vector v, we can write int count = v.size()<vilas_m> : Be careful not to write statements like vector<int> v[10] when you need a vector of size 10. <vilas_m> : The above statement actually initialises 10 seperate vectors instead of a single vector of size 10. <vilas_m> : To change the size of a vector, we can use the resize() function.<vilas_m> : So to declare a vector of size 10, we can write 2 statements: vector<int> v; v.resize(10);<Pratik> : What will be the names of those 10 vectors? All v?<vilas_m> : Yea. Sort of. The different vectors can be accessed by using the vector index. So for the 1st vector, we write v[0] <vilas_m> : Something similar to 2D arrays <Pratik> : All right<vilas_m> : The size of a vector can be changed at any time using the resize function.<vilas_m> : Note that you do not need to use the resize function at all.<vilas_m> :  When you use the push_back()/insert() function, the vector automatically increases the size of the vector as and when it is required.<vilas_m> : Accessing elements in a vector works in the same way as arrays.<vilas_m> : To access say the 10th element of a vector, we can just write v[9] <vilas_m> : Does anyone know what are iterators? <Sai_> : Difference between push_back() and insert()?<vilas_m> : Come on guys :P Guess something atleast<vilas_m> : @Sai, i will come to insert() function soon<Sai_> : okk<vilas_m> : So basically iterators help you in traversing a given container (in this case, a vector)<Pratik> : Iterators are the variables we use to run through an array or vector?<vilas_m> : Yes! @Pratik :) <tushaar_> : 204:5082:572:c9b0:2409:a61b:9620 PRIVMSG #wcalgo4 :Yeah that<vilas_m> : We can declare an iterator for any container as follows: <vilas_m> : container_type :: iterator i;<vilas_m> : So for vector, we can write vector<int>::iterator i <vilas_m> : There are default iterators in vectors which return the address of the starting element (v.begin()) and end of the vector ( v.end() )<vilas_m> : Note that v.end() does not give the address of the last element present in the vector.<vilas_m> : It returns the address past the last element.<vilas_m> : So if we want the last element in the vector, we can use the address (v.end() - 1)<tushaar_> : 204:5082:572:c9b0:2409:a61b:9620 PRIVMSG #wcalgo4 :Can we not use: for(int i = v[0]; i < v[n]; i++); What is the advantage of iterators over this?<tushaar_> : 204:5082:572:c9b0:2409:a61b:9620 PRIVMSG #wcalgo4 :i mean 0 -> n<vilas_m> : What if the size of the vector is unknown? We need to write an additional statement there. And itertors give the address of a particular element in a vector<tushaar_> : 204:5082:572:c9b0:2409:a61b:9620 PRIVMSG #wcalgo4 :Oh Okay!<vilas_m> : So lets say you have a particular address of an element in the vector. Instead of traversing the whole vector to find it's index, we can directly access that element with the iterator <vilas_m> : If we want to print all elements in a vector, we can write<vilas_m> : vector<int> :: iterator i; <vilas_m> : for( i = v.begin() ; i! = v.end(); i++) { printf("%d", *i); // or cout<<*i; } <ashwin> : so iterator is a pointer<vilas_m> : @Sai, Can you write a statement that sorts a given vector? (Use the STL function discussed in the last session)<vilas_m> : Yes, Ashwin<Sai_> : Yes<Sai_> : sort(v.begin(), v.end()-1)<Sai_> : I dont remember the symtax properly <tushaar_> : 204:5082:572:c9b0:2409:a61b:9620 PRIVMSG #wcalgo4 :int count = v.size();